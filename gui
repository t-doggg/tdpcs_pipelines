#!/bin/bash

# Versionsnummer definieren
VERSION="0.04b_fix"

# Conda initialisieren
#echo "Initialisiere Conda..."
#eval "$(conda shell.bash hook)"
#echo "Conda initialisiert."
#conda activate nanophase-v0.2.2

# Funktion zur Anzeige der Hilfsnachricht
display_help() {
    echo "Verwendung: $0 [analyse Requirements] | [check] | [-v]"
    echo "  Analyse Requirements:    \tFührt die Analyse mit den angegebenen Optionen aus"
    echo " \t-i EINGABEDATEI\tDie Eingabedatei im FASTQ-Format"
    echo " \t-o AUSGABEVERZEICHNIS\tDas Ausgabeverzeichnis für die Ergebnisse"
    echo " \t-x REFERENZDATEI\tDie Referenzdatei im FASTA-Format"
    echo " \t-d DATENBANK_PFAD\tDer Pfad zur NCBI-Datenbank"
    echo " \t-t THREADS\tAnzahl der Threads (Standard 4)"
    echo " \t-c COVERAGE\tProzent Coverage NCBI-Reads für Prozessierung (Standard 75%)"
    echo " \t-f FRAKTION\tProzent Fraktion Kraken2-Reads für Neu-Prozessierung mit BLASTn (Standard 0.0)"
    echo " \t-m MODE\t\tfs, fl, ll oder ls (Standard 'ls')"
    echo " \t-v \t\tVersionsabfrage für tdcs"
    echo "  check \t\tÜberprüft, ob alle erforderlichen Ordner vorhanden sind"
}

# Analysemodus ausführen
run_analysis() {
    # Remove 'local' so variables are global
    MODE="dev"  # Standardmäßig im FAST-Modus
    THREADS="4"  # Standardmäßig 4 Thread
    COVERAGE="25" # Standardmäßig 75% Coverage
    FRACTION="0.0" # Standardmäßig 75% Coverage

    # Add colon after 'c' so -c expects an argument
    while getopts ":i:o:x:d:t:m:c:f:" opt; do
        case $opt in
            i)
                INFQ="$OPTARG"
                ;;
            o)
                OUTDIR="$OPTARG"
                ;;
            x)
                REFHUM="$OPTARG"
                ;;
            d)
                DATABASE_PATH="$OPTARG"
                ;;
            t)
                THREADS="$OPTARG"
                ;;
            c)
                COVERAGE="$OPTARG"
                ;;
            f)
                FRACTION="$OPTARG"
                ;;
            m)
                MODE="$OPTARG"
                ;;
            \?)
                echo "Ungültige Option: -$OPTARG" >&2
                display_help
                exit 1
                ;;
            :)
                echo "Option -$OPTARG erfordert ein Argument." >&2
                display_help
                exit 1
                ;;
        esac
    done

    if [[ -z $INFQ || -z $OUTDIR || -z $REFHUM || -z $DATABASE_PATH ]]; then
    echo "Erforderliche Argumente fehlen."
    display_help
    exit 1
    fi  

    # Run tdcs immediately
    run_tdcs
}

# Funktion zum Überprüfen der vorhandenen Ordner und Tools
run_check() {
    local parent_dir="./.."
    local checked_file="$parent_dir/checked"
    local folders=("shell" "R")

    # Überprüfe, ob die erforderlichen Ordner existieren
    for folder in "${folders[@]}"; do
        if [ ! -d "$parent_dir/$folder" ]; then
            echo "Fehlender Ordner: $folder"
            exit 1
        fi
    done

    # Überprüfe, ob die checked-Datei existiert
    if [ ! -f "$checked_file" ]; then
        echo "'checked'-Datei nicht gefunden. Führe Tool-Überprüfung durch..."
        check_checked_file
    fi

    # Prüfe, ob alle Tools und Skripte als installiert/vorhanden markiert sind
    local missing=0
    while IFS= read -r line; do
        if echo "$line" | grep -q "NICHT"; then
            missing=1
            break
        fi
    done < "$checked_file"

    if [ "$missing" -eq 1 ]; then
        echo "Nicht alle Tools/Skripte sind korrekt installiert. Führe Tool-Überprüfung erneut durch..."
        check_checked_file
        echo "Bitte prüfen Sie die Datei '$checked_file' auf fehlende Tools/Skripte."
        exit 1
    fi

    echo "Alle erforderlichen Ordner, Tools und Skripte sind vorhanden."
}

# Funktion zum Überprüfen, ob minimap2, bwa mem, kraken2 und ncbi blastn megablast installiert sind
check_checked_file() {
    local parent_dir="./.."
    local checked_file="$parent_dir/checked"

    # Überschreibe die Datei, falls sie existiert
    : > "$checked_file"

    # minimap2 prüfen
    if command -v minimap2 >/dev/null 2>&1; then
        echo "minimap2: installiert" >> "$checked_file"
    else
        echo "minimap2: NICHT installiert" >> "$checked_file"
    fi

    # bwa mem prüfen
    if command -v bwa >/dev/null 2>&1; then
        if bwa 2>&1 | grep -q 'mem'; then
            echo "bwa mem: installiert" >> "$checked_file"
        else
            echo "bwa: installiert, aber 'mem' NICHT unterstützt" >> "$checked_file"
        fi
    else
        echo "bwa: NICHT installiert" >> "$checked_file"
    fi

    # kraken2 prüfen
    if command -v kraken2 >/dev/null 2>&1; then
        echo "kraken2: installiert" >> "$checked_file"
    else
        echo "kraken2: NICHT installiert" >> "$checked_file"
    fi

    # blastn (megablast) prüfen
    if command -v blastn >/dev/null 2>&1; then
        # Prüfen, ob megablast unterstützt wird
        if blastn -task megablast -version >/dev/null 2>&1; then
            echo "blastn (megablast): installiert" >> "$checked_file"
        else
            echo "blastn: installiert, aber megablast NICHT unterstützt" >> "$checked_file"
        fi
    else
        echo "blastn: NICHT installiert" >> "$checked_file"
    fi

    # Prüfen, ob die Skripte im aktuellen Verzeichnis vorhanden sind
    local scripts=("run_tdcs_long_single.sh" "run_tdcs_long_loop.sh" "run_tdcs_fast_single.sh" "run_tdcs_fast_loop.sh")
    for script in "${scripts[@]}"; do
        if [ -f "$script" ]; then
            echo "$script: vorhanden" >> "$checked_file"
        else
            echo "$script: NICHT vorhanden" >> "$checked_file"
        fi
    done

    echo "Überprüfung abgeschlossen. Ergebnisse in '$checked_file'."
}

# Versionsabfrage für tdcs durchführen
query_version() {
    echo "Version: $VERSION"
}

# Funktion zum Ausführen von entspechendem Modus basierend auf -m Parameter
run_tdcs() {
    if [ "$MODE" == "fl" ]; then
        ./run_tdcs_fast_loop.sh -i "$INFQ" -o "$OUTDIR" -x "$REFHUM" -d "$DATABASE_PATH" -t "$THREADS" -c "$COVERAGE" -d "$FRACTION"
    elif [ "$MODE" == "fs" ]; then
        ./run_tdcs_fast_single.sh -i "$INFQ" -o "$OUTDIR" -x "$REFHUM" -d "$DATABASE_PATH" -t "$THREADS" -c "$COVERAGE" -d "$FRACTION"
    elif [ "$MODE" == "ll" ]; then
        ./run_tdcs_long_loop.sh -i "$INFQ" -o "$OUTDIR" -x "$REFHUM" -d "$DATABASE_PATH" -t "$THREADS" -c "$COVERAGE" -d "$FRACTION"
    elif [ "$MODE" == "ls" ]; then
        ./run_tdcs_long_single.sh -i "$INFQ" -o "$OUTDIR" -x "$REFHUM" -d "$DATABASE_PATH" -t "$THREADS" -c "$COVERAGE" -d "$FRACTION"
    elif [ "$MODE" == "dev" ]; then
        ./run_tdcs_dev.sh -i "$INFQ" -o "$OUTDIR" -x "$REFHUM" -d "$DATABASE_PATH" -t "$THREADS" -c "$COVERAGE" -d "$FRACTION"
    else
        echo "Ungültiger Modus: $MODE. Der Modus muss entweder 'fl', 'fs', 'll' oder 'ls' sein."
        exit 1
    fi
}

# Optionen analysieren
if [ "$1" == "analyse" ]; then
    shift
    run_analysis "$@"
elif [ "$1" == "check" ]; then
    run_check
    check_checked_file
elif [ "$1" == "-v" ]; then
    query_version
else
    display_help
fi

